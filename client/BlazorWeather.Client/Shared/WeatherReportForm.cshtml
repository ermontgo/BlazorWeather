@inject HttpClient Http
@inject IState<AppState> State
@inject IDispatcher Dispatcher


@if ((State.Value.Stadiums?.Count ?? 0) > 0)
{
    <ul class="list-group report-item">
        @*Stadium - Combo Box*@

        <select bind="@Stadium" class="list-group-item">
            @foreach (var stadium in State.Value.Stadiums)
            {
                <option value="@stadium.Name">@stadium.Name</option>
            }
        </select>
        @*Conditions - Combo Box*@
        <div class="list-group-item" style="display: flex;">
            <select bind="@CurrentConditions">
                @foreach (var condition in State.Value.Conditions)
                {
                    <option value="@condition">@condition</option>
                }
            </select>
            <input type="text" bind="@Temperature" placeholder="Temperature (F)" />
        </div>

        @*Email - Text*@
        <input type="text" bind="@Email" class="list-group-item" placeholder="Email Address" />
        @*Submit*@
        <input type="button" onclick="@(_ => PostReport())" class="list-group-item" value="Submit" />
    </ul>
}


@functions {

    string Stadium { get; set; }
    string CurrentConditions { get; set; }
    string Temperature { get; set; }
    string Email { get; set; }

    protected override async Task OnInitAsync()
    {
        State.Subscribe(this);
        Dispatcher.Dispatch(new GetStadiumsAction());
    }

    async Task PostReport()
    {
        var report = new BlazorWeather.Api.Contracts.WeatherReport()
        {
            Stadium = Stadium,
            ReportTime = DateTimeOffset.Now,
            WeatherDescription = CurrentConditions,
            TemperatureDegreesFahrenheit = Convert.ToDecimal(Temperature),
            EmailAddress = Email
        };

        Dispatcher.Dispatch(new AddReportAction(report));

        Stadium = string.Empty;
        CurrentConditions = string.Empty;
        Temperature = string.Empty;
    }
}